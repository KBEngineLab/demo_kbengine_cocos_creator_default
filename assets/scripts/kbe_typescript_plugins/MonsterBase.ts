/*
	Generated by KBEngine!
	Please do not modify this file!
	Please inherit this module, such as: (class Monster extends MonsterBase)
	tools = kbcmd
*/


import {Entity , EntityComponent , EntityCall , MemoryStream , DataTypes , KBETypes} from './KBEngine';
import * as ExportEntity from './ExportEntity';

import { Method } from './Method';
import { ScriptModule } from './ScriptModule';
import EntityDef from './EntityDef';
import { Property } from './Property';
import { Vector2, Vector3, Vector4 } from './KBEMath';

import { EntityBaseEntityCall_MonsterBase, EntityCellEntityCall_MonsterBase } from './EntityCallMonsterBase';

// defined in */scripts/entity_defs/Monster.def
// Please inherit and implement "class Monster extends MonsterBase"
export abstract class MonsterBase extends Entity{
	public baseEntityCall:EntityBaseEntityCall_MonsterBase | null = null;
	public cellEntityCall:EntityCellEntityCall_MonsterBase | null = null;

	public HP:number  = 0;
	public onHPChanged(oldValue:number){}
	public HP_Max:number  = 0;
	public onHP_MaxChanged(oldValue:number){}
	public MP:number  = 0;
	public onMPChanged(oldValue:number){}
	public MP_Max:number  = 0;
	public onMP_MaxChanged(oldValue:number){}
	public entityNO:number  = 0;
	public onEntityNOChanged(oldValue:number){}
	public forbids:number  = 0;
	public onForbidsChanged(oldValue:number){}
	public modelID:number  = 0;
	public onModelIDChanged(oldValue:number){}
	public modelScale:number  = 30;
	public onModelScaleChanged(oldValue:number){}
	public moveSpeed:number  = 50;
	public onMoveSpeedChanged(oldValue:number){}
	public name:string = "";
	public onNameChanged(oldValue:string){}
	public state:number  = 0;
	public onStateChanged(oldValue:number){}
	public subState:number  = 0;
	public onSubStateChanged(oldValue:number){}
	public uid:number  = 0;
	public onUidChanged(oldValue:number){}
	public utype:number  = 0;
	public onUtypeChanged(oldValue:number){}

	public abstract recvDamage(arg1:number, arg2:number, arg3:number, arg4:number); 

	constructor(){
		super();
	}

	public override onComponentsEnterworld(){
	}

	public override onComponentsLeaveworld(){
	}

	public override onGetBase(){
		this.baseEntityCall = new EntityBaseEntityCall_MonsterBase(this.id, this.className);
	}

	public override onGetCell(){
		this.cellEntityCall = new EntityCellEntityCall_MonsterBase(this.id, this.className);
	}

	public override onLoseCell(){
		this.cellEntityCall = null;
	}

	public override getBaseEntityCall(){
		return this.baseEntityCall;
	}

	public override getCellEntityCall(){
		return this.cellEntityCall;
	}

	public override attachComponents(){
	}

	public override detachComponents(){
	}

	public override onRemoteMethodCall(stream:MemoryStream){
		let sm:ScriptModule = EntityDef.moduledefs["Monster"];

		let methodUtype = 0;
		let componentPropertyUType = 0;

		if(sm.usePropertyDescrAlias){
			componentPropertyUType = stream.ReadUint8();
		}
		else{
			componentPropertyUType = stream.ReadUint16();
		}

		if(sm.useMethodDescrAlias){
			methodUtype = stream.ReadUint8();
		}
		else
		{
			methodUtype = stream.ReadUint16();
		}

		let method:Method | null = null;

		if(componentPropertyUType == 0)
		{
			method = sm.idmethods[methodUtype];
		}
		else
		{
			let pComponentPropertyDescription:Property = sm.idpropertys[componentPropertyUType];
			switch(pComponentPropertyDescription.properUtype){
				default:
					break;
			}

			return;
		}

		switch(method!.methodUtype){
			case 34:
				let recvDamage_arg1:number = stream.ReadInt32();
				let recvDamage_arg2:number = stream.ReadInt32();
				let recvDamage_arg3:number = stream.ReadInt32();
				let recvDamage_arg4:number = stream.ReadInt32();
				this.recvDamage(recvDamage_arg1, recvDamage_arg2, recvDamage_arg3, recvDamage_arg4);
				break;
			default:
				break;
		};
	}

	public override onUpdatePropertys(stream:MemoryStream){
		let sm:ScriptModule = EntityDef.moduledefs["Monster"];
		let pdatas = sm.idpropertys;

		while(stream.Length() > 0)
		{
			let _t_utype:number = 0;
			let _t_child_utype:number = 0;

			{
				if(sm.usePropertyDescrAlias){
					_t_utype = stream.ReadUint8();
					_t_child_utype = stream.ReadUint8();
				}
				else
				{
					_t_utype = stream.ReadUint16();
					_t_child_utype = stream.ReadUint16();
				}
			}

			let prop:Property | null = null;

			if(_t_utype == 0){
				prop = pdatas[_t_child_utype];
			}
			else
			{
				let pComponentPropertyDescription:Property = pdatas[_t_utype];
				switch(pComponentPropertyDescription.properUtype)
					{
					default:
						break;
				}

				return;
			}

			switch(prop!.properUtype){
				case 47001:
					let oldval_HP:number = this.HP;
					this.HP = stream.ReadInt32();

					if(prop!.isBase())
						{
						if(this.inited)
							this.onHPChanged(oldval_HP);
						}
					else
						{
						if(this.inWorld)
							this.onHPChanged(oldval_HP);
					}

					break;
				case 47002:
					let oldval_HP_Max:number = this.HP_Max;
					this.HP_Max = stream.ReadInt32();

					if(prop!.isBase())
						{
						if(this.inited)
							this.onHP_MaxChanged(oldval_HP_Max);
						}
					else
						{
						if(this.inWorld)
							this.onHP_MaxChanged(oldval_HP_Max);
					}

					break;
				case 47003:
					let oldval_MP:number = this.MP;
					this.MP = stream.ReadInt32();

					if(prop!.isBase())
						{
						if(this.inited)
							this.onMPChanged(oldval_MP);
						}
					else
						{
						if(this.inWorld)
							this.onMPChanged(oldval_MP);
					}

					break;
				case 47004:
					let oldval_MP_Max:number = this.MP_Max;
					this.MP_Max = stream.ReadInt32();

					if(prop!.isBase())
						{
						if(this.inited)
							this.onMP_MaxChanged(oldval_MP_Max);
						}
					else
						{
						if(this.inWorld)
							this.onMP_MaxChanged(oldval_MP_Max);
					}

					break;
				case 40001:
					let oldval_direction:Vector3 = this.direction;
					this.direction = stream.ReadVector3();

					if(prop!.isBase())
						{
						if(this.inited)
							this.onDirectionChanged(oldval_direction);
						}
					else
						{
						if(this.inWorld)
							this.onDirectionChanged(oldval_direction);
					}

					break;
				case 51007:
					let oldval_entityNO:number = this.entityNO;
					this.entityNO = stream.ReadUint32();

					if(prop!.isBase())
						{
						if(this.inited)
							this.onEntityNOChanged(oldval_entityNO);
						}
					else
						{
						if(this.inWorld)
							this.onEntityNOChanged(oldval_entityNO);
					}

					break;
				case 47005:
					let oldval_forbids:number = this.forbids;
					this.forbids = stream.ReadInt32();

					if(prop!.isBase())
						{
						if(this.inited)
							this.onForbidsChanged(oldval_forbids);
						}
					else
						{
						if(this.inWorld)
							this.onForbidsChanged(oldval_forbids);
					}

					break;
				case 41006:
					let oldval_modelID:number = this.modelID;
					this.modelID = stream.ReadUint32();

					if(prop!.isBase())
						{
						if(this.inited)
							this.onModelIDChanged(oldval_modelID);
						}
					else
						{
						if(this.inWorld)
							this.onModelIDChanged(oldval_modelID);
					}

					break;
				case 41007:
					let oldval_modelScale:number = this.modelScale;
					this.modelScale = stream.ReadUint8();

					if(prop!.isBase())
						{
						if(this.inited)
							this.onModelScaleChanged(oldval_modelScale);
						}
					else
						{
						if(this.inWorld)
							this.onModelScaleChanged(oldval_modelScale);
					}

					break;
				case 32:
					let oldval_moveSpeed:number = this.moveSpeed;
					this.moveSpeed = stream.ReadUint8();

					if(prop!.isBase())
						{
						if(this.inited)
							this.onMoveSpeedChanged(oldval_moveSpeed);
						}
					else
						{
						if(this.inWorld)
							this.onMoveSpeedChanged(oldval_moveSpeed);
					}

					break;
				case 41003:
					let oldval_name:string = this.name;
					this.name = stream.ReadUnicode();

					if(prop!.isBase())
						{
						if(this.inited)
							this.onNameChanged(oldval_name);
						}
					else
						{
						if(this.inWorld)
							this.onNameChanged(oldval_name);
					}

					break;
				case 40000:
					let oldval_position:Vector3 = this.position;
					this.position = stream.ReadVector3();

					if(prop!.isBase())
						{
						if(this.inited)
							this.onPositionChanged(oldval_position);
						}
					else
						{
						if(this.inWorld)
							this.onPositionChanged(oldval_position);
					}

					break;
				case 40002:
					stream.ReadUint32();
					break;
				case 47006:
					let oldval_state:number = this.state;
					this.state = stream.ReadInt8();

					if(prop!.isBase())
						{
						if(this.inited)
							this.onStateChanged(oldval_state);
						}
					else
						{
						if(this.inWorld)
							this.onStateChanged(oldval_state);
					}

					break;
				case 47007:
					let oldval_subState:number = this.subState;
					this.subState = stream.ReadUint8();

					if(prop!.isBase())
						{
						if(this.inited)
							this.onSubStateChanged(oldval_subState);
						}
					else
						{
						if(this.inWorld)
							this.onSubStateChanged(oldval_subState);
					}

					break;
				case 41004:
					let oldval_uid:number = this.uid;
					this.uid = stream.ReadUint32();

					if(prop!.isBase())
						{
						if(this.inited)
							this.onUidChanged(oldval_uid);
						}
					else
						{
						if(this.inWorld)
							this.onUidChanged(oldval_uid);
					}

					break;
				case 41005:
					let oldval_utype:number = this.utype;
					this.utype = stream.ReadUint32();

					if(prop!.isBase())
						{
						if(this.inited)
							this.onUtypeChanged(oldval_utype);
						}
					else
						{
						if(this.inWorld)
							this.onUtypeChanged(oldval_utype);
					}

					break;
				default:
					break;
			};
		}
	}

	public override callPropertysSetMethods(){
		let sm:ScriptModule = EntityDef.moduledefs["Monster"];
		let pdatas = sm.idpropertys;

		let oldval_HP:number = this.HP;
		let prop_HP:Property = pdatas[4];
		if(prop_HP.isBase()){
			if(this.inited && !this.inWorld)
				this.onHPChanged(oldval_HP);
		}
		else
		{
			if(this.inWorld)
			{
				if(prop_HP.isOwnerOnly() && !this.IsPlayer())
				{
				}
				else
				{
					this.onHPChanged(oldval_HP);
				}
			}
		}

		let oldval_HP_Max:number = this.HP_Max;
		let prop_HP_Max:Property = pdatas[5];
		if(prop_HP_Max.isBase()){
			if(this.inited && !this.inWorld)
				this.onHP_MaxChanged(oldval_HP_Max);
		}
		else
		{
			if(this.inWorld)
			{
				if(prop_HP_Max.isOwnerOnly() && !this.IsPlayer())
				{
				}
				else
				{
					this.onHP_MaxChanged(oldval_HP_Max);
				}
			}
		}

		let oldval_MP:number = this.MP;
		let prop_MP:Property = pdatas[6];
		if(prop_MP.isBase()){
			if(this.inited && !this.inWorld)
				this.onMPChanged(oldval_MP);
		}
		else
		{
			if(this.inWorld)
			{
				if(prop_MP.isOwnerOnly() && !this.IsPlayer())
				{
				}
				else
				{
					this.onMPChanged(oldval_MP);
				}
			}
		}

		let oldval_MP_Max:number = this.MP_Max;
		let prop_MP_Max:Property = pdatas[7];
		if(prop_MP_Max.isBase()){
			if(this.inited && !this.inWorld)
				this.onMP_MaxChanged(oldval_MP_Max);
		}
		else
		{
			if(this.inWorld)
			{
				if(prop_MP_Max.isOwnerOnly() && !this.IsPlayer())
				{
				}
				else
				{
					this.onMP_MaxChanged(oldval_MP_Max);
				}
			}
		}

		let oldval_direction:Vector3 = this.direction;
		let prop_direction:Property = pdatas[2];
		if(prop_direction.isBase()){
			if(this.inited && !this.inWorld)
				this.onDirectionChanged(oldval_direction);
		}
		else
		{
			if(this.inWorld)
			{
				if(prop_direction.isOwnerOnly() && !this.IsPlayer())
				{
				}
				else
				{
					this.onDirectionChanged(oldval_direction);
				}
			}
		}

		let oldval_entityNO:number = this.entityNO;
		let prop_entityNO:Property = pdatas[8];
		if(prop_entityNO.isBase()){
			if(this.inited && !this.inWorld)
				this.onEntityNOChanged(oldval_entityNO);
		}
		else
		{
			if(this.inWorld)
			{
				if(prop_entityNO.isOwnerOnly() && !this.IsPlayer())
				{
				}
				else
				{
					this.onEntityNOChanged(oldval_entityNO);
				}
			}
		}

		let oldval_forbids:number = this.forbids;
		let prop_forbids:Property = pdatas[9];
		if(prop_forbids.isBase()){
			if(this.inited && !this.inWorld)
				this.onForbidsChanged(oldval_forbids);
		}
		else
		{
			if(this.inWorld)
			{
				if(prop_forbids.isOwnerOnly() && !this.IsPlayer())
				{
				}
				else
				{
					this.onForbidsChanged(oldval_forbids);
				}
			}
		}

		let oldval_modelID:number = this.modelID;
		let prop_modelID:Property = pdatas[10];
		if(prop_modelID.isBase()){
			if(this.inited && !this.inWorld)
				this.onModelIDChanged(oldval_modelID);
		}
		else
		{
			if(this.inWorld)
			{
				if(prop_modelID.isOwnerOnly() && !this.IsPlayer())
				{
				}
				else
				{
					this.onModelIDChanged(oldval_modelID);
				}
			}
		}

		let oldval_modelScale:number = this.modelScale;
		let prop_modelScale:Property = pdatas[11];
		if(prop_modelScale.isBase()){
			if(this.inited && !this.inWorld)
				this.onModelScaleChanged(oldval_modelScale);
		}
		else
		{
			if(this.inWorld)
			{
				if(prop_modelScale.isOwnerOnly() && !this.IsPlayer())
				{
				}
				else
				{
					this.onModelScaleChanged(oldval_modelScale);
				}
			}
		}

		let oldval_moveSpeed:number = this.moveSpeed;
		let prop_moveSpeed:Property = pdatas[12];
		if(prop_moveSpeed.isBase()){
			if(this.inited && !this.inWorld)
				this.onMoveSpeedChanged(oldval_moveSpeed);
		}
		else
		{
			if(this.inWorld)
			{
				if(prop_moveSpeed.isOwnerOnly() && !this.IsPlayer())
				{
				}
				else
				{
					this.onMoveSpeedChanged(oldval_moveSpeed);
				}
			}
		}

		let oldval_name:string = this.name;
		let prop_name:Property = pdatas[13];
		if(prop_name.isBase()){
			if(this.inited && !this.inWorld)
				this.onNameChanged(oldval_name);
		}
		else
		{
			if(this.inWorld)
			{
				if(prop_name.isOwnerOnly() && !this.IsPlayer())
				{
				}
				else
				{
					this.onNameChanged(oldval_name);
				}
			}
		}

		let oldval_position:Vector3 = this.position;
		let prop_position:Property = pdatas[1];
		if(prop_position.isBase()){
			if(this.inited && !this.inWorld)
				this.onPositionChanged(oldval_position);
		}
		else
		{
			if(this.inWorld)
			{
				if(prop_position.isOwnerOnly() && !this.IsPlayer())
				{
				}
				else
				{
					this.onPositionChanged(oldval_position);
				}
			}
		}

		let oldval_state:number = this.state;
		let prop_state:Property = pdatas[14];
		if(prop_state.isBase()){
			if(this.inited && !this.inWorld)
				this.onStateChanged(oldval_state);
		}
		else
		{
			if(this.inWorld)
			{
				if(prop_state.isOwnerOnly() && !this.IsPlayer())
				{
				}
				else
				{
					this.onStateChanged(oldval_state);
				}
			}
		}

		let oldval_subState:number = this.subState;
		let prop_subState:Property = pdatas[15];
		if(prop_subState.isBase()){
			if(this.inited && !this.inWorld)
				this.onSubStateChanged(oldval_subState);
		}
		else
		{
			if(this.inWorld)
			{
				if(prop_subState.isOwnerOnly() && !this.IsPlayer())
				{
				}
				else
				{
					this.onSubStateChanged(oldval_subState);
				}
			}
		}

		let oldval_uid:number = this.uid;
		let prop_uid:Property = pdatas[16];
		if(prop_uid.isBase()){
			if(this.inited && !this.inWorld)
				this.onUidChanged(oldval_uid);
		}
		else
		{
			if(this.inWorld)
			{
				if(prop_uid.isOwnerOnly() && !this.IsPlayer())
				{
				}
				else
				{
					this.onUidChanged(oldval_uid);
				}
			}
		}

		let oldval_utype:number = this.utype;
		let prop_utype:Property = pdatas[17];
		if(prop_utype.isBase()){
			if(this.inited && !this.inWorld)
				this.onUtypeChanged(oldval_utype);
		}
		else
		{
			if(this.inWorld)
			{
				if(prop_utype.isOwnerOnly() && !this.IsPlayer())
				{
				}
				else
				{
					this.onUtypeChanged(oldval_utype);
				}
			}
		}

	}

}