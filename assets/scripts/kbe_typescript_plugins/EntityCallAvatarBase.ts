/*
	Generated by KBEngine!
	Please do not modify this file!
	
	tools = kbcmd
*/

import { EntityCall,DataTypes,KBETypes } from './KBEngine';
import EntityDef from './EntityDef';
import { EntityBaseEntityCall_TestBase } from './EntityCallTestBase';
import { EntityBaseEntityCall_TestNoBaseBase } from './EntityCallTestNoBaseBase';
import { EntityCellEntityCall_TestBase } from './EntityCallTestBase';
import { EntityCellEntityCall_TestNoBaseBase } from './EntityCallTestNoBaseBase';
// defined in */scripts/entity_defs/Avatar.def
export class EntityBaseEntityCall_AvatarBase extends EntityCall {
	public component1: EntityBaseEntityCall_TestBase;
	public component2: EntityBaseEntityCall_TestBase;
	public component3: EntityBaseEntityCall_TestNoBaseBase;

	constructor(eid: number, ename: string) {
		super(eid, ename);
		this.component1 = new EntityBaseEntityCall_TestBase(16, this.id);
		this.component2 = new EntityBaseEntityCall_TestBase(21, this.id);
		this.component3 = new EntityBaseEntityCall_TestNoBaseBase(22, this.id);
		this.entityCallType = 1;
	}

}

export class EntityCellEntityCall_AvatarBase extends EntityCall{
	public component1:EntityCellEntityCall_TestBase;
	public component2:EntityCellEntityCall_TestBase;
	public component3:EntityCellEntityCall_TestNoBaseBase;

	constructor(eid: number, ename: string) { 
		super(eid, ename);
		this.component1 = new EntityCellEntityCall_TestBase(16, this.id);
		this.component2 = new EntityCellEntityCall_TestBase(21, this.id);
		this.component3 = new EntityCellEntityCall_TestNoBaseBase(22, this.id);
		this.entityCallType = 0;
	}

	public dialog(arg1:number, arg2:number){
		let pBundle = this.NewCallToMethod("dialog", 0);
		if(pBundle == null)
			return;

		this.bundle!.WriteInt32(arg1);
		this.bundle!.WriteUint32(arg2);
		this.SendCall();
	}

	public jump(){
		let pBundle = this.NewCallToMethod("jump", 0);
		if(pBundle == null)
			return;

		this.SendCall();
	}

	public relive(arg1:number){
		let pBundle = this.NewCallToMethod("relive", 0);
		if(pBundle == null)
			return;

		this.bundle!.WriteUint8(arg1);
		this.SendCall();
	}

	public requestPull(){
		let pBundle = this.NewCallToMethod("requestPull", 0);
		if(pBundle == null)
			return;

		this.SendCall();
	}

	public useTargetSkill(arg1:number, arg2:number){
		let pBundle = this.NewCallToMethod("useTargetSkill", 0);
		if(pBundle == null)
			return;

		this.bundle!.WriteInt32(arg1);
		this.bundle!.WriteInt32(arg2);
		this.SendCall();
	}

}
