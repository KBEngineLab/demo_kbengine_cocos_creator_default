/*
	Generated by KBEngine!
	Please do not modify this file!
	Please inherit this module, such as: (class Test extends TestBase)
	tools = kbcmd
*/


import {Entity , EntityComponent , EntityCall , MemoryStream , DataTypes , KBETypes} from './KBEngine';
import * as ExportEntity from './ExportEntity';

import { Method } from './Method';
import { ScriptModule } from './ScriptModule';
import EntityDef from './EntityDef';
import { Property } from './Property';
import { Vector2, Vector3, Vector4 } from './KBEMath';

import { EntityBaseEntityCall_TestBase, EntityCellEntityCall_TestBase } from './EntityCallTestBase';

// defined in */scripts/entity_defs/Test.def
export abstract class TestBase extends EntityComponent{
	public baseEntityCall:EntityBaseEntityCall_TestBase | null = null;
	public cellEntityCall:EntityCellEntityCall_TestBase | null = null;

	public own:number  = 1001;
	public onOwnChanged(oldValue:number){}
	public state:number  = 100;
	public onStateChanged(oldValue:number){}

	public abstract helloCB(arg1:number); 

	public override  createFromStream(stream:MemoryStream )
	{
		super.createFromStream(stream);
	}

	public override onGetBase()
	{
		this.ownerID = this.owner.id;
		this.baseEntityCall = new EntityBaseEntityCall_TestBase(this.entityComponentPropertyID, this.ownerID);
	}

	public override onGetCell()
	{
		this.ownerID = this.owner.id;
		this.cellEntityCall = new EntityCellEntityCall_TestBase(this.entityComponentPropertyID, this.ownerID);
	}

	public override onLoseCell()
	{
		this.cellEntityCall = null;
	}

	public override getScriptModule() : ScriptModule{
		return EntityDef.moduledefs["Test"];
	}

	public override onRemoteMethodCall(methodUtype:number, stream:MemoryStream){
		let sm:ScriptModule = EntityDef.moduledefs["Test"];

		let method:Method = sm.idmethods[methodUtype];
		switch(method!.methodUtype){
			case 28:
				let helloCB_arg1:number = stream.ReadInt32();
				this.helloCB(helloCB_arg1);
				break;
			default:
				break;
		};
	}

	public override onUpdatePropertys(propUtype:number, stream:MemoryStream, maxCount:number){
		let sm:ScriptModule = EntityDef.moduledefs["Test"];
		let pdatas = sm.idpropertys;

		while(stream.Length() > 0 && maxCount-- != 0)
		{
			let _t_utype:number = 0;
			let _t_child_utype:number = propUtype;

			if(_t_child_utype == 0)
			{
				if(sm.usePropertyDescrAlias){
					_t_utype = stream.ReadUint8();
					_t_child_utype = stream.ReadUint8();
				}
				else
				{
					_t_utype = stream.ReadUint16();
					_t_child_utype = stream.ReadUint16();
				}
			}

			let prop:Property | null = null;

			prop = pdatas[_t_child_utype];

			switch(prop!.properUtype){
				case 18:
					let oldval_own:number = this.own;
					this.own = stream.ReadInt32();

					if(prop!.isBase())
						{
						if(this.owner.inited)
							this.onOwnChanged(oldval_own);
						}
					else
						{
						if(this.owner.inWorld)
							this.onOwnChanged(oldval_own);
					}

					break;
				case 17:
					let oldval_state:number = this.state;
					this.state = stream.ReadInt32();

					if(prop!.isBase())
						{
						if(this.owner.inited)
							this.onStateChanged(oldval_state);
						}
					else
						{
						if(this.owner.inWorld)
							this.onStateChanged(oldval_state);
					}

					break;
				default:
					break;
			};
		}
	}

	public override callPropertysSetMethods(){
		let sm:ScriptModule = EntityDef.moduledefs["Test"];
		let pdatas = sm.idpropertys;

		let oldval_own:number = this.own;
		let prop_own:Property = pdatas[4];
		if(prop_own.isBase()){
			if(this.owner.inited && !this.owner.inWorld)
				this.onOwnChanged(oldval_own);
		}
		else
		{
			if(this.owner.inWorld)
			{
				if(prop_own.isOwnerOnly() && !this.owner.IsPlayer())
				{
				}
				else
				{
					this.onOwnChanged(oldval_own);
				}
			}
		}

		let oldval_state:number = this.state;
		let prop_state:Property = pdatas[5];
		if(prop_state.isBase()){
			if(this.owner.inited && !this.owner.inWorld)
				this.onStateChanged(oldval_state);
		}
		else
		{
			if(this.owner.inWorld)
			{
				if(prop_state.isOwnerOnly() && !this.owner.IsPlayer())
				{
				}
				else
				{
					this.onStateChanged(oldval_state);
				}
			}
		}

	}

}