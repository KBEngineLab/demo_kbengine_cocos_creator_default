/*
	Generated by KBEngine!
	Please do not modify this file!
	Please inherit this module, such as: (class SpaceDuplicate extends SpaceDuplicateBase)
	tools = kbcmd
*/


import {Entity , EntityComponent , EntityCall , MemoryStream , DataTypes , KBETypes} from './KBEngine';
import * as ExportEntity from './ExportEntity';

import { Method } from './Method';
import { ScriptModule } from './ScriptModule';
import EntityDef from './EntityDef';
import { Property } from './Property';
import { Vector2, Vector3, Vector4 } from './KBEMath';

import { EntityBaseEntityCall_SpaceDuplicateBase, EntityCellEntityCall_SpaceDuplicateBase } from './EntityCallSpaceDuplicateBase';

// defined in */scripts/entity_defs/SpaceDuplicate.def
// Please inherit and implement "class SpaceDuplicate extends SpaceDuplicateBase"
export abstract class SpaceDuplicateBase extends Entity{
	public baseEntityCall:EntityBaseEntityCall_SpaceDuplicateBase | null = null;
	public cellEntityCall:EntityCellEntityCall_SpaceDuplicateBase | null = null;

	public modelID:number  = 0;
	public onModelIDChanged(oldValue:number){}
	public modelScale:number  = 30;
	public onModelScaleChanged(oldValue:number){}
	public name:string = "";
	public onNameChanged(oldValue:string){}
	public uid:number  = 0;
	public onUidChanged(oldValue:number){}
	public utype:number  = 0;
	public onUtypeChanged(oldValue:number){}


	constructor(){
		super();
	}

	public override onComponentsEnterworld(){
	}

	public override onComponentsLeaveworld(){
	}

	public override onGetBase(){
		this.baseEntityCall = new EntityBaseEntityCall_SpaceDuplicateBase(this.id, this.className);
	}

	public override onGetCell(){
		this.cellEntityCall = new EntityCellEntityCall_SpaceDuplicateBase(this.id, this.className);
	}

	public override onLoseCell(){
		this.cellEntityCall = null;
	}

	public override getBaseEntityCall(){
		return this.baseEntityCall;
	}

	public override getCellEntityCall(){
		return this.cellEntityCall;
	}

	public override attachComponents(){
	}

	public override detachComponents(){
	}

	public override onRemoteMethodCall(stream:MemoryStream){
		let sm:ScriptModule = EntityDef.moduledefs["SpaceDuplicate"];

		let methodUtype = 0;
		let componentPropertyUType = 0;

		if(sm.usePropertyDescrAlias){
			componentPropertyUType = stream.ReadUint8();
		}
		else{
			componentPropertyUType = stream.ReadUint16();
		}

		if(sm.useMethodDescrAlias){
			methodUtype = stream.ReadUint8();
		}
		else
		{
			methodUtype = stream.ReadUint16();
		}

		let method:Method | null = null;

		if(componentPropertyUType == 0)
		{
			method = sm.idmethods[methodUtype];
		}
		else
		{
			let pComponentPropertyDescription:Property = sm.idpropertys[componentPropertyUType];
			switch(pComponentPropertyDescription.properUtype){
				default:
					break;
			}

			return;
		}

		switch(method!.methodUtype){
			default:
				break;
		};
	}

	public override onUpdatePropertys(stream:MemoryStream){
		let sm:ScriptModule = EntityDef.moduledefs["SpaceDuplicate"];
		let pdatas = sm.idpropertys;

		while(stream.Length() > 0)
		{
			let _t_utype:number = 0;
			let _t_child_utype:number = 0;

			{
				if(sm.usePropertyDescrAlias){
					_t_utype = stream.ReadUint8();
					_t_child_utype = stream.ReadUint8();
				}
				else
				{
					_t_utype = stream.ReadUint16();
					_t_child_utype = stream.ReadUint16();
				}
			}

			let prop:Property | null = null;

			if(_t_utype == 0){
				prop = pdatas[_t_child_utype];
			}
			else
			{
				let pComponentPropertyDescription:Property = pdatas[_t_utype];
				switch(pComponentPropertyDescription.properUtype)
					{
					default:
						break;
				}

				return;
			}

			switch(prop!.properUtype){
				case 40001:
					let oldval_direction:Vector3 = this.direction;
					this.direction = stream.ReadVector3();

					if(prop!.isBase())
						{
						if(this.inited)
							this.onDirectionChanged(oldval_direction);
						}
					else
						{
						if(this.inWorld)
							this.onDirectionChanged(oldval_direction);
					}

					break;
				case 41006:
					let oldval_modelID:number = this.modelID;
					this.modelID = stream.ReadUint32();

					if(prop!.isBase())
						{
						if(this.inited)
							this.onModelIDChanged(oldval_modelID);
						}
					else
						{
						if(this.inWorld)
							this.onModelIDChanged(oldval_modelID);
					}

					break;
				case 41007:
					let oldval_modelScale:number = this.modelScale;
					this.modelScale = stream.ReadUint8();

					if(prop!.isBase())
						{
						if(this.inited)
							this.onModelScaleChanged(oldval_modelScale);
						}
					else
						{
						if(this.inWorld)
							this.onModelScaleChanged(oldval_modelScale);
					}

					break;
				case 41003:
					let oldval_name:string = this.name;
					this.name = stream.ReadUnicode();

					if(prop!.isBase())
						{
						if(this.inited)
							this.onNameChanged(oldval_name);
						}
					else
						{
						if(this.inWorld)
							this.onNameChanged(oldval_name);
					}

					break;
				case 40000:
					let oldval_position:Vector3 = this.position;
					this.position = stream.ReadVector3();

					if(prop!.isBase())
						{
						if(this.inited)
							this.onPositionChanged(oldval_position);
						}
					else
						{
						if(this.inWorld)
							this.onPositionChanged(oldval_position);
					}

					break;
				case 40002:
					stream.ReadUint32();
					break;
				case 41004:
					let oldval_uid:number = this.uid;
					this.uid = stream.ReadUint32();

					if(prop!.isBase())
						{
						if(this.inited)
							this.onUidChanged(oldval_uid);
						}
					else
						{
						if(this.inWorld)
							this.onUidChanged(oldval_uid);
					}

					break;
				case 41005:
					let oldval_utype:number = this.utype;
					this.utype = stream.ReadUint32();

					if(prop!.isBase())
						{
						if(this.inited)
							this.onUtypeChanged(oldval_utype);
						}
					else
						{
						if(this.inWorld)
							this.onUtypeChanged(oldval_utype);
					}

					break;
				default:
					break;
			};
		}
	}

	public override callPropertysSetMethods(){
		let sm:ScriptModule = EntityDef.moduledefs["SpaceDuplicate"];
		let pdatas = sm.idpropertys;

		let oldval_direction:Vector3 = this.direction;
		let prop_direction:Property = pdatas[2];
		if(prop_direction.isBase()){
			if(this.inited && !this.inWorld)
				this.onDirectionChanged(oldval_direction);
		}
		else
		{
			if(this.inWorld)
			{
				if(prop_direction.isOwnerOnly() && !this.IsPlayer())
				{
				}
				else
				{
					this.onDirectionChanged(oldval_direction);
				}
			}
		}

		let oldval_modelID:number = this.modelID;
		let prop_modelID:Property = pdatas[4];
		if(prop_modelID.isBase()){
			if(this.inited && !this.inWorld)
				this.onModelIDChanged(oldval_modelID);
		}
		else
		{
			if(this.inWorld)
			{
				if(prop_modelID.isOwnerOnly() && !this.IsPlayer())
				{
				}
				else
				{
					this.onModelIDChanged(oldval_modelID);
				}
			}
		}

		let oldval_modelScale:number = this.modelScale;
		let prop_modelScale:Property = pdatas[5];
		if(prop_modelScale.isBase()){
			if(this.inited && !this.inWorld)
				this.onModelScaleChanged(oldval_modelScale);
		}
		else
		{
			if(this.inWorld)
			{
				if(prop_modelScale.isOwnerOnly() && !this.IsPlayer())
				{
				}
				else
				{
					this.onModelScaleChanged(oldval_modelScale);
				}
			}
		}

		let oldval_name:string = this.name;
		let prop_name:Property = pdatas[6];
		if(prop_name.isBase()){
			if(this.inited && !this.inWorld)
				this.onNameChanged(oldval_name);
		}
		else
		{
			if(this.inWorld)
			{
				if(prop_name.isOwnerOnly() && !this.IsPlayer())
				{
				}
				else
				{
					this.onNameChanged(oldval_name);
				}
			}
		}

		let oldval_position:Vector3 = this.position;
		let prop_position:Property = pdatas[1];
		if(prop_position.isBase()){
			if(this.inited && !this.inWorld)
				this.onPositionChanged(oldval_position);
		}
		else
		{
			if(this.inWorld)
			{
				if(prop_position.isOwnerOnly() && !this.IsPlayer())
				{
				}
				else
				{
					this.onPositionChanged(oldval_position);
				}
			}
		}

		let oldval_uid:number = this.uid;
		let prop_uid:Property = pdatas[7];
		if(prop_uid.isBase()){
			if(this.inited && !this.inWorld)
				this.onUidChanged(oldval_uid);
		}
		else
		{
			if(this.inWorld)
			{
				if(prop_uid.isOwnerOnly() && !this.IsPlayer())
				{
				}
				else
				{
					this.onUidChanged(oldval_uid);
				}
			}
		}

		let oldval_utype:number = this.utype;
		let prop_utype:Property = pdatas[8];
		if(prop_utype.isBase()){
			if(this.inited && !this.inWorld)
				this.onUtypeChanged(oldval_utype);
		}
		else
		{
			if(this.inWorld)
			{
				if(prop_utype.isOwnerOnly() && !this.IsPlayer())
				{
				}
				else
				{
					this.onUtypeChanged(oldval_utype);
				}
			}
		}

	}

}