/*
	Generated by KBEngine!
	Please do not modify this file!
	Please inherit this module, such as: (class Account extends AccountBase)
	tools = kbcmd
*/


import {Entity , EntityComponent , EntityCall , MemoryStream , DataTypes , KBETypes} from './KBEngine';
import * as ExportEntity from './ExportEntity';

import { Method } from './Method';
import { ScriptModule } from './ScriptModule';
import EntityDef from './EntityDef';
import { Property } from './Property';
import { Vector2, Vector3, Vector4 } from './KBEMath';

import { EntityBaseEntityCall_AccountBase, EntityCellEntityCall_AccountBase } from './EntityCallAccountBase';

// defined in */scripts/entity_defs/Account.def
// Please inherit and implement "class Account extends AccountBase"
export abstract class AccountBase extends Entity{
	public baseEntityCall:EntityBaseEntityCall_AccountBase | null = null;
	public cellEntityCall:EntityCellEntityCall_AccountBase | null = null;

	public lastSelCharacter:bigint  = 0n;
	public onLastSelCharacterChanged(oldValue:bigint){}

	public abstract onCreateAvatarResult(arg1:number, arg2:KBETypes.AVATAR_INFOS); 
	public abstract onRemoveAvatar(arg1:bigint); 
	public abstract onReqAvatarList(arg1:KBETypes.AVATAR_INFOS_LIST); 

	constructor(){
		super();
	}

	public override onComponentsEnterworld(){
	}

	public override onComponentsLeaveworld(){
	}

	public override onGetBase(){
		this.baseEntityCall = new EntityBaseEntityCall_AccountBase(this.id, this.className);
	}

	public override onGetCell(){
		this.cellEntityCall = new EntityCellEntityCall_AccountBase(this.id, this.className);
	}

	public override onLoseCell(){
		this.cellEntityCall = null;
	}

	public override getBaseEntityCall(){
		return this.baseEntityCall;
	}

	public override getCellEntityCall(){
		return this.cellEntityCall;
	}

	public override attachComponents(){
	}

	public override detachComponents(){
	}

	public override onRemoteMethodCall(stream:MemoryStream){
		let sm:ScriptModule = EntityDef.moduledefs["Account"];

		let methodUtype = 0;
		let componentPropertyUType = 0;

		if(sm.usePropertyDescrAlias){
			componentPropertyUType = stream.ReadUint8();
		}
		else{
			componentPropertyUType = stream.ReadUint16();
		}

		if(sm.useMethodDescrAlias){
			methodUtype = stream.ReadUint8();
		}
		else
		{
			methodUtype = stream.ReadUint16();
		}

		let method:Method | null = null;

		if(componentPropertyUType == 0)
		{
			method = sm.idmethods[methodUtype];
		}
		else
		{
			let pComponentPropertyDescription:Property = sm.idpropertys[componentPropertyUType];
			switch(pComponentPropertyDescription.properUtype){
				default:
					break;
			}

			return;
		}

		switch(method!.methodUtype){
			case 10005:
				let onCreateAvatarResult_arg1:number = stream.ReadUint8();
				let onCreateAvatarResult_arg2:KBETypes.AVATAR_INFOS = method.args[1].createFromStreamEx(stream);
				this.onCreateAvatarResult(onCreateAvatarResult_arg1, onCreateAvatarResult_arg2);
				break;
			case 3:
				let onRemoveAvatar_arg1:bigint = stream.ReadUint64().toBigInt();
				this.onRemoveAvatar(onRemoveAvatar_arg1);
				break;
			case 10003:
				let onReqAvatarList_arg1:KBETypes.AVATAR_INFOS_LIST = method.args[0].createFromStreamEx(stream);
				this.onReqAvatarList(onReqAvatarList_arg1);
				break;
			default:
				break;
		};
	}

	public override onUpdatePropertys(stream:MemoryStream){
		let sm:ScriptModule = EntityDef.moduledefs["Account"];
		let pdatas = sm.idpropertys;

		while(stream.Length() > 0)
		{
			let _t_utype:number = 0;
			let _t_child_utype:number = 0;

			{
				if(sm.usePropertyDescrAlias){
					_t_utype = stream.ReadUint8();
					_t_child_utype = stream.ReadUint8();
				}
				else
				{
					_t_utype = stream.ReadUint16();
					_t_child_utype = stream.ReadUint16();
				}
			}

			let prop:Property | null = null;

			if(_t_utype == 0){
				prop = pdatas[_t_child_utype];
			}
			else
			{
				let pComponentPropertyDescription:Property = pdatas[_t_utype];
				switch(pComponentPropertyDescription.properUtype)
					{
					default:
						break;
				}

				return;
			}

			switch(prop!.properUtype){
				case 40001:
					let oldval_direction:Vector3 = this.direction;
					this.direction = stream.ReadVector3();

					if(prop!.isBase())
						{
						if(this.inited)
							this.onDirectionChanged(oldval_direction);
						}
					else
						{
						if(this.inWorld)
							this.onDirectionChanged(oldval_direction);
					}

					break;
				case 2:
					let oldval_lastSelCharacter:bigint = this.lastSelCharacter;
					this.lastSelCharacter = stream.ReadUint64().toBigInt();

					if(prop!.isBase())
						{
						if(this.inited)
							this.onLastSelCharacterChanged(oldval_lastSelCharacter);
						}
					else
						{
						if(this.inWorld)
							this.onLastSelCharacterChanged(oldval_lastSelCharacter);
					}

					break;
				case 40000:
					let oldval_position:Vector3 = this.position;
					this.position = stream.ReadVector3();

					if(prop!.isBase())
						{
						if(this.inited)
							this.onPositionChanged(oldval_position);
						}
					else
						{
						if(this.inWorld)
							this.onPositionChanged(oldval_position);
					}

					break;
				case 40002:
					stream.ReadUint32();
					break;
				default:
					break;
			};
		}
	}

	public override callPropertysSetMethods(){
		let sm:ScriptModule = EntityDef.moduledefs["Account"];
		let pdatas = sm.idpropertys;

		let oldval_direction:Vector3 = this.direction;
		let prop_direction:Property = pdatas[2];
		if(prop_direction.isBase()){
			if(this.inited && !this.inWorld)
				this.onDirectionChanged(oldval_direction);
		}
		else
		{
			if(this.inWorld)
			{
				if(prop_direction.isOwnerOnly() && !this.IsPlayer())
				{
				}
				else
				{
					this.onDirectionChanged(oldval_direction);
				}
			}
		}

		let oldval_lastSelCharacter:bigint = this.lastSelCharacter;
		let prop_lastSelCharacter:Property = pdatas[4];
		if(prop_lastSelCharacter.isBase()){
			if(this.inited && !this.inWorld)
				this.onLastSelCharacterChanged(oldval_lastSelCharacter);
		}
		else
		{
			if(this.inWorld)
			{
				if(prop_lastSelCharacter.isOwnerOnly() && !this.IsPlayer())
				{
				}
				else
				{
					this.onLastSelCharacterChanged(oldval_lastSelCharacter);
				}
			}
		}

		let oldval_position:Vector3 = this.position;
		let prop_position:Property = pdatas[1];
		if(prop_position.isBase()){
			if(this.inited && !this.inWorld)
				this.onPositionChanged(oldval_position);
		}
		else
		{
			if(this.inWorld)
			{
				if(prop_position.isOwnerOnly() && !this.IsPlayer())
				{
				}
				else
				{
					this.onPositionChanged(oldval_position);
				}
			}
		}

	}

}